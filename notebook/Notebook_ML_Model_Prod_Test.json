{
	"name": "Notebook_ML_Model_Prod_Test",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "542dcf75-dee0-44c4-b946-c1f3f5405b08"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3d1a0d9a-7e0f-434a-bb08-b3b842299587/resourceGroups/Synapse_Analytics/providers/Microsoft.Synapse/workspaces/synapsedtsws/bigDataPools/SparkSmall",
				"name": "SparkSmall",
				"type": "Spark",
				"endpoint": "https://synapsedtsws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import library"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import numpy as np\r\n",
					"import pandas as pd\r\n",
					"from pandas.plotting import autocorrelation_plot\r\n",
					"import matplotlib as mpl\r\n",
					"import matplotlib.pyplot as pyplot\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import seaborn as sns\r\n",
					"from datetime import datetime, timedelta\r\n",
					"import time\r\n",
					"from dateutil.parser import parse \r\n",
					"import math\r\n",
					"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error   # metrics\r\n",
					"from statsmodels.tsa.seasonal import seasonal_decompose\r\n",
					"from statsmodels.graphics.tsaplots import plot_pacf\r\n",
					"from statsmodels.tsa.statespace.sarimax import SARIMAX\r\n",
					"from statsmodels.tsa.ar_model import AutoReg\r\n",
					"from statsmodels.tsa.arima.model import ARIMA\r\n",
					"import pmdarima as pm\r\n",
					"\r\n",
					"import warnings\r\n",
					"warnings.simplefilter(\"ignore\")\r\n",
					"\r\n",
					"pyplot.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 120})\r\n",
					"print('lib are imported')"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Evaluating the models with data - create function"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def metric_table(test, predictions):\r\n",
					"  mse = mean_squared_error(test, predictions)\r\n",
					"  model_r2, model_RMSE, model_MAE, model_MSE, model_Adj_R2 = [], [], [], [], []\r\n",
					"\r\n",
					"  r2 = r2_score(test, predictions)\r\n",
					"  rmse = np.sqrt(mean_squared_error(test, predictions))\r\n",
					"  mae = mean_absolute_error(test, predictions)\r\n",
					"  mse = mean_squared_error(test, predictions)\r\n",
					"  # mape = mean_absolute_percentage_error(test, predictions)\r\n",
					"  adj_r2 = 1-(1-r2)*(test.shape[0]-1)/(test.shape[0]-1-1)\r\n",
					"\r\n",
					"  model_r2.append(r2)\r\n",
					"  model_RMSE.append(rmse)\r\n",
					"  model_MAE.append(mae)\r\n",
					"  model_MSE.append(mse)\r\n",
					"  # model_MAPE.append(mape)\r\n",
					"  model_Adj_R2.append(adj_r2)\r\n",
					"\r\n",
					"  df_result = pd.DataFrame({\"R2\":model_r2, \"Adj_R2\": model_Adj_R2, \"RMSE\": model_RMSE, \"MAE\":model_MAE, \"MSE\": model_MSE})\r\n",
					"  df_result = round(df_result,3)\r\n",
					"  df_result = df_result.sort_values(\"R2\", ascending=False)\r\n",
					"  df_result\r\n",
					"  return df_result"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create function that add all missing date"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def add_all_date(df, whitout_sun=0):\r\n",
					"  rng = pd.date_range(start = df.index[0], end =df.index[-1],  freq='D')        # pocetni datum je prvi index (datum), rajnji datum je poslednji red indexa\r\n",
					"  df_date_temp = pd.DataFrame({ 'DATUM': rng}) \r\n",
					"  if whitout_sun == 1:\r\n",
					"    df_date_temp = df_date_temp[df_date_temp['DATUM'].dt.weekday != 6]          # removing sunday (6) from dummy df_date_temp\r\n",
					"  df_date_temp.set_index('DATUM', inplace=True)                                 # set column date as index\r\n",
					"  df = df[df.index.weekday != 6]                                                # removing sunday (6) from df\r\n",
					"  df = df_date_temp.join(df)                                                    # left join dataset on dummy date\r\n",
					"  df = df.fillna(0)                                                             # fill NaN values with 0\r\n",
					"  df = df.iloc[:,-1:].astype(int)                                               # convert string to int\r\n",
					"  return df"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Azure database connection string"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# credentials\r\n",
					"jdbcHostname = \"srv-db-sql-dmd.database.windows.net\"\r\n",
					"jdbcDatabase = \"db-sql-dmd\"\r\n",
					"jdbcPort = \"1433\"\r\n",
					"username = \"marko\"\r\n",
					"password = \"5Avramovic!\"\r\n",
					"jdbcUrl = \"jdbc:sqlserver://{0}:{1};database={2}\".format(jdbcHostname, jdbcPort, jdbcDatabase)\r\n",
					"connectionProperties = {\r\n",
					"    \"user\" : username,\r\n",
					"    \"password\" : password,\r\n",
					"    \"driver\" : \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n",
					"}"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def import_ds_total(item, brend, table):\r\n",
					"    pushdown_query = \"(SELECT DATUM, {0} FROM {2} ) {1}\".format(item,brend,table) \r\n",
					"    df_spark = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n",
					"    df = df_spark.toPandas()                      # Spark df to Pandas df\r\n",
					"\r\n",
					"    df = df.sort_values(by=\"DATUM\")               # Sort dataframe by date\r\n",
					"    df.set_index('DATUM', inplace=True)           # convert DATUM column to index\r\n",
					"    df.index = pd.to_datetime(df.index)           # convert index to datetime\r\n",
					"    df = add_all_date(df, )                       # add all missing date with (df, 0) or without (df, 1) sunday\r\n",
					"    df.head(2)\r\n",
					"    return df \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create arima function"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def arima(df):\r\n",
					"    n = 30\r\n",
					"    order = [28,0,0]\r\n",
					"    order = [3,0,0]\r\n",
					"    model = ARIMA(df, order=(order))\r\n",
					"    model_fit = model.fit()\r\n",
					"    prediction = model_fit.forecast(n)\r\n",
					"\r\n",
					"    # korekcije\r\n",
					"    prediction = prediction.clip(lower=0)                           # sve negativne vrednosti svedi na 0\r\n",
					"    prediction = add_all_date(prediction)                           # set sundey to 0\r\n",
					"    prediction = prediction.rename(columns={'predicted_mean': item})        # set the name of column as item\r\n",
					"    prediction.head()\r\n",
					"\r\n",
					"    # ako prediction_contaier ne postoji kreiraj ga od prve predikcije, u suprotnom dodaj novu predikciju na prediction_contaier\r\n",
					"    if 'prediction_contaier' not in globals():  \r\n",
					"        # print('not exist')   \r\n",
					"        global prediction_contaier          \r\n",
					"        prediction_contaier = prediction\r\n",
					"    else:\r\n",
					"        # print('exist')             \r\n",
					"        prediction_contaier =  prediction_contaier.join(prediction, how='left', lsuffix='_left', rsuffix='_right')\r\n",
					"    return prediction_contaier"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Create import dataset total function"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def import_ds_total(item, brend, table):\r\n",
					"    pushdown_query = \"(SELECT DATUM, {0} FROM {2} ) {1}\".format(item,brend,table) \r\n",
					"    df_spark = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n",
					"    df = df_spark.toPandas()                      # Spark df to Pandas df\r\n",
					"\r\n",
					"    df = df.sort_values(by=\"DATUM\")               # Sort dataframe by date\r\n",
					"    df.set_index('DATUM', inplace=True)           # convert DATUM column to index\r\n",
					"    df.index = pd.to_datetime(df.index)           # convert index to datetime\r\n",
					"    df = add_all_date(df, )                       # add all missing date with (df, 0) or without (df, 1) sunday\r\n",
					"    df.head(2)\r\n",
					"    return df \r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Train ARIMA model and prediction"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Loop brends - import dataset and applay arima (using custom function)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Delete prediction_container\r\n",
					"if 'prediction_contaier' in globals(): \r\n",
					"    del prediction_contaier\r\n",
					"    print('deleted')\r\n",
					"\r\n",
					"# set brend and table\r\n",
					"# STAVKE_NA_KOMIS_NALOGU, KOMIS_NALOG, POVRAT_KARTON, POVRAT_KOMAD,  komisionAggFinal,  povratAggFinal\r\n",
					"brend = 'Grupno'\r\n",
					"table = 'src.komisionAggFinal'"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# connect to database with credentials, execut SQL \r\n",
					"item = 'STAVKE_NA_KOMIS_NALOGU'\r\n",
					"df = import_ds_total(item, brend, table)\r\n",
					"\r\n",
					"# call arima function on dataset\r\n",
					"prediction_contaier = arima(df)\r\n",
					"prediction_contaier.head(2)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# connect to database with credentials, execut SQL \r\n",
					"item = 'KOMIS_NALOG'\r\n",
					"df = import_ds_total(item, brend, table)\r\n",
					"\r\n",
					"# call custom arima function on dataset\r\n",
					"prediction_contaier = arima(df)\r\n",
					"prediction_contaier.head(2)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# connect to database with credentials, execut SQL \r\n",
					"item = 'POVRAT_KARTON'\r\n",
					"table = 'src.povratAggFinal'\r\n",
					"\r\n",
					"df = import_ds_total(item, brend, table)\r\n",
					"\r\n",
					"# call arima function on dataset\r\n",
					"prediction_contaier = arima(df)\r\n",
					"prediction_contaier.head(2)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# connect to database with credentials, execut SQL \r\n",
					"item = 'POVRAT_KOMAD'\r\n",
					"df = import_ds_total(item, brend, table)\r\n",
					"\r\n",
					"# call arima function on dataset\r\n",
					"prediction_contaier = arima(df)\r\n",
					"prediction_contaier.head(2)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Covert prediction_contaier index to column and store on blob storage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# covert index to column\r\n",
					"prediction_contaier['DATUM'] = prediction_contaier.index                      \r\n",
					"# sat DATUM column to be first\r\n",
					"column_name = list(prediction_contaier.columns.values)\r\n",
					"column_name_wo_datum = column_name\r\n",
					"column_name_wo_datum.remove('DATUM')\r\n",
					"prediction_contaier = prediction_contaier[['DATUM'] + column_name_wo_datum]\r\n",
					"prediction_contaier.head()\r\n",
					"\r\n",
					"\r\n",
					"# Output using Spark\r\n",
					"folder_name = brend\r\n",
					"(sqlContext.createDataFrame(prediction_contaier)\r\n",
					" .coalesce(1)\r\n",
					" .write\r\n",
					" .mode(\"overwrite\")\r\n",
					" .option(\"header\", \"true\")\r\n",
					" .format(\"com.databricks.spark.csv\")\r\n",
					" .save('abfss://processed@dlsynapsedts.dfs.core.windows.net/dmd/' + folder_name))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2 = pd.DataFrame(np.array([[1, 2], [4, 5], [7, 8]]),\r\n",
					"                   columns=['Col1', 'Co2'])\r\n",
					"df2"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"prediction_contaier.head(10)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Graph"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": true,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pyplot.figure(figsize=(18, 6), dpi=80)       # adjust graph size\r\n",
					"# pyplot.plot(prediction, color='red', label='prediction')\r\n",
					"# pyplot.legend(loc=\"upper left\")\r\n",
					"# pyplot.show()"
				],
				"execution_count": 14
			}
		]
	}
}