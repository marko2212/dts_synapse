{
	"name": "Notebook ML Model",
	"properties": {
		"folder": {
			"name": "Archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f56b8784-1956-4b1b-bb39-2de6f7e4cf72"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3d1a0d9a-7e0f-434a-bb08-b3b842299587/resourceGroups/Synapse_Analytics/providers/Microsoft.Synapse/workspaces/synapsedtsws/bigDataPools/SparkSmall",
				"name": "SparkSmall",
				"type": "Spark",
				"endpoint": "https://synapsedtsws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 300
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print('hello DTS')\r\n",
					"\r\n",
					"p = 'marko poparko'\r\n",
					"\r\n",
					"def myF():\r\n",
					"    return print(p)\r\n",
					"\r\n",
					"myF()\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"account_name = \"dlsynapsedts\"\r\n",
					"container_name = \"processed\"\r\n",
					"relative_path = \"\"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\r\n",
					"# adls_path = 'https://dlsynapsedts.blob.core.windows.net/processed/DMD_dataset.csv' % (container_name, account_name, relative_path)\r\n",
					"\r\n",
					"df1 = spark.read.option('header', 'true') \\\r\n",
					"                .option('delimiter', ',') \\\r\n",
					"                .csv(adls_path + '/DMD_dataset.csv')"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://processed@dlsynapsedts.dfs.core.windows.net/DMD_dataset.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					")\r\n",
					"display(df.limit(10))"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"\r\n",
					"from dateutil.parser import parse \r\n",
					"import matplotlib as mpl\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import matplotlib.pyplot as pyplot\r\n",
					"import seaborn as sns\r\n",
					"\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"import warnings\r\n",
					"warnings.simplefilter(\"ignore\")\r\n",
					"\r\n",
					"from datetime import datetime\r\n",
					"import time\r\n",
					"import math\r\n",
					"from sklearn.ensemble import RandomForestRegressor\r\n",
					"from sklearn.linear_model import LinearRegression\r\n",
					"from sklearn.preprocessing import PolynomialFeatures\r\n",
					"from sklearn.tree import DecisionTreeRegressor\r\n",
					"from sklearn.model_selection import cross_val_score\r\n",
					"from sklearn.svm import SVR\r\n",
					"from sklearn.linear_model import LogisticRegression\r\n",
					"from sklearn.linear_model import Ridge\r\n",
					"from sklearn.linear_model import Lasso\r\n",
					"from sklearn import neighbors\r\n",
					"from xgboost import XGBRegressor \r\n",
					"\r\n",
					"from pandas.plotting import autocorrelation_plot\r\n",
					"\r\n",
					"\r\n",
					"# from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error, mean_absolute_percentage_error   # metrics\r\n",
					"from statsmodels.tsa.seasonal import seasonal_decompose\r\n",
					"from statsmodels.graphics.tsaplots import plot_pacf\r\n",
					"from statsmodels.tsa.ar_model import AR\r\n",
					"from statsmodels.tsa.arima_model import ARIMA\r\n",
					"from statsmodels.tsa.statespace.sarimax import SARIMAX\r\n",
					"# from statsmodels.tsa.ar_model import AutoReg\r\n",
					"# from statsmodels.tsa.arima.model import ARIMA\r\n",
					"# import pmdarima as pm\r\n",
					"\r\n",
					"\r\n",
					"plt.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 120})\r\n",
					"print('jes imported jeeee :D')"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def metric_table(test, predictions):\r\n",
					"    \r\n",
					"  mse = mean_squared_error(test, predictions)\r\n",
					"  model_r2, model_RMSE, model_MAE, model_MSE, model_MAPE, model_Adj_R2 = [], [], [], [], [], []\r\n",
					"\r\n",
					"\r\n",
					"  r2 = r2_score(test, predictions)\r\n",
					"  rmse = np.sqrt(mean_squared_error(test, predictions))\r\n",
					"  mae = mean_absolute_error(test, predictions)\r\n",
					"  mse = mean_squared_error(test, predictions)\r\n",
					"  mape = mean_absolute_percentage_error(test, predictions)\r\n",
					"\r\n",
					"  # adj_r2 = 1-(1-r2)*(n-1)/(n-p-1)       # n - broj uzoraka, p - broj nezavis var\r\n",
					"  adj_r2 = 1-(1-r2)*(test.shape[0]-1)/(test.shape[0]-1-1)\r\n",
					"\r\n",
					"  model_r2.append(r2)\r\n",
					"  model_RMSE.append(rmse)\r\n",
					"  model_MAE.append(mae)\r\n",
					"  model_MSE.append(mse)\r\n",
					"  model_MAPE.append(mape)\r\n",
					"  model_Adj_R2.append(adj_r2)\r\n",
					"\r\n",
					"\r\n",
					"  df_result = pd.DataFrame({\"R2\":model_r2, \"Adj_R2\": model_Adj_R2, \"RMSE\": model_RMSE, \"MAE\":model_MAE, \"MSE\": model_MSE, \"MAPE\": model_MAPE})\r\n",
					"  df_result = round(df_result,3)\r\n",
					"  df_result = df_result.sort_values(\"R2\", ascending=False)\r\n",
					"  df_result\r\n",
					"  return df_result"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error, mean_absolute_percentage_error"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# data = sc.parallelize(list(\"Hello World\"))\r\n",
					"sc.parallelize(list(\"Hello World\"))"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install -U scikit-learn"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"url = 'https://www.cmegroup.com/CmeWS/mvc/Volume/Details/F/8478/20200807/F?tradeDate=20200807'\r\n",
					"r = requests.get(url)\r\n",
					"dj = r.json()\r\n",
					"        \r\n",
					"df = pd.DataFrame(dj['monthData'])\r\n",
					"# df.to_csv('out.csv', index=False)"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}